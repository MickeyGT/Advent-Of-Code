#include<fstream>
#include<cstring>
#include<queue>
#include<algorithm>
#include<string.h>
#include<bitset>
#include<ctime>
#include<set>
#include<cmath>
#include<unordered_map>
#include<iomanip>
#include<map>
#include<stack>
#include<vector>
#include<bitset>
#include<functional>
#include<iostream>
#include<deque>
#include<unordered_set>
#include<queue>
#include<list>
#include<array>
#include<ctype.h>
using namespace std;
long long i, j, k, ok, nr, n, m, el, minx=11111111,miny=11111111, maxx,maxy, x, y, a, b,sum;
string s,str;
long long fr[1000001];
bool disqualified[1000001];
vector<pair<int, int>>v;
int mat[10000][10000];
deque<pair<int, int>>deq;
int team[10000][10000];
void lee()
{
	nr=1;
	while (deq.size() != 0)
	{
		int sz = deq.size();
		for (int k = 0; k < sz; k++)
		{
			auto iter = *deq.begin();
			int x = iter.first;
			int y = iter.second;
			int p;
			if (x - 1 >= minx)
			{
				p = mat[x - 1][y];
				if (p == 0)
				{
					p = nr;
					deq.push_back({ x - 1,y });
					mat[x - 1][y] = p;
					team[x - 1][y] = team[x][y];
				}
				else
				{
					if (p == nr&&team[x][y]!=team[x-1][y])
					{
						team[x - 1][y] = -1;
						mat[x - 1][y] = p;
					}
				}

			}
			if (y - 1 >= miny)
			{
				p = mat[x][y - 1];
				if (p == 0)
				{
					p = nr;
					deq.push_back({ x,y - 1 });
					team[x][y - 1] = team[x][y];
					mat[x][y - 1] = p;
				}
				else
				{
					if (p == nr && team[x][y] != team[x][y - 1])
					{
						team[x][y - 1] = -1;
						mat[x][y - 1] = p;
					}
				}

			}
			if (y + 1 <= maxy)
			{
				p = mat[x][y + 1];
				if (p == 0)
				{
					p = nr;
					deq.push_back({ x,y + 1 });
					mat[x][y + 1] = p;
					team[x][y + 1] = team[x][y];
				}
				else
				{
					if (p == nr && team[x][y] != team[x][y + 1])
					{
						team[x][y + 1] = -1;
						mat[x][y + 1] = p;
					}
				}

			}
			if (x + 1 <= maxx)
			{
				p = mat[x + 1][y];
				if (p == 0)
				{
					p = nr;
					deq.push_back({ x + 1,y });
					mat[x + 1][y] = p;
					team[x + 1][y] = team[x][y];
				}
				else
				{
					if (p == nr && team[x][y] != team[x + 1][y])
					{
						team[x + 1][y] = -1;
						mat[x + 1][y] = p;
					}
				}

			}
			deq.pop_front();
		}
		nr++;
	}
	cout << "done";
	for (int i = minx; i <= maxx; i++)
		for (int j = miny; j <= maxy; j++)
			fr[team[i][j]]++;
	for (int i = minx; i <= maxx; i++)
		disqualified[team[i][miny]] = disqualified[team[i][maxy]] = true;
	for (int i = miny; i <= maxy; i++)
		disqualified[team[minx][i]] = disqualified[team[maxx][i]] = true;
	long long max1 = 0;
	for (int i = 0; i <= 500; i++)
		if (disqualified[i] == false)
		{
			max1 = max(max1, fr[i]);
			cout << fr[i]<<' ';
		}
	cout << max1;
	return;
}
int main()
{
	ifstream f("file.in");
	//ofstream g("file.out");
	//getline(f, s);
	for (int i = 1; i <= 50; i++)
	{
		f >> s;
		j = 0;
		x = 0;
		while (s[j] != ',')
		{
			x = x * 10 + s[j] - '0';
			j++;
		}
		f >> y;
		swap(x, y);
		minx = min(minx, x);
		maxx = max(maxx, x);
		miny = min(miny, y);
		maxy = max(maxy, y);
		deq.push_back({ x,y });
		team[x][y] = i;
	}
	minx--;
	miny--;
	maxx++;
	maxy++;
	lee();
	return 0;
}
